(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{577:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[t._v("通过后序遍历，知道左右子树的情况后，然后再决定往上返回什么。")]),t._v(" "),a("p",[t._v("首先递归终止条件是：当root等于p或者q时，返回root。或者当root越过叶子节点时，就返回null。")]),t._v(" "),a("p",[t._v("递归工作：递归root的左子树，返回记为left；递归root的右子树，返回记为right。")]),t._v(" "),a("p",[t._v("返回值：当left、right某一个不为null，说明p或者q在相应的子树中。如果left和right同时都不为null，说明p和q处于root的异侧，则返回最近公共祖先root。")])]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("236. 二叉树的最近公共祖先"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("难度中等962收藏分享切换为英文接收动态反馈")]),t._v(" "),a("p",[t._v("给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度百科"),a("OutboundLink")],1),t._v("中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（"),a("strong",[t._v("一个节点也可以是它自己的祖先")]),t._v("）。”")]),t._v(" "),a("p",[a("strong",[t._v("示例 1：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/02/28/fkwXUn46mD2KHrh.png",alt:"img"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出：3\n解释：节点 5 和节点 1 的最近公共祖先是节点 3 。\n")])])]),a("p",[a("strong",[t._v("示例 2：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/02/28/fkwXUn46mD2KHrh.png",alt:"img"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出：5\n解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。\n")])])]),a("p",[a("strong",[t._v("示例 3：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：root = [1,2], p = 1, q = 2\n输出：1\n")])])]),a("p",[a("strong",[t._v("提示：")])]),t._v(" "),a("ul",[a("li",[t._v("树中节点数目在范围 "),a("code",[t._v("[2, 105]")]),t._v(" 内。")]),t._v(" "),a("li",[a("code",[t._v("-109 <= Node.val <= 109")])]),t._v(" "),a("li",[t._v("所有 "),a("code",[t._v("Node.val")]),t._v(" "),a("code",[t._v("互不相同")]),t._v(" 。")]),t._v(" "),a("li",[a("code",[t._v("p != q")])]),t._v(" "),a("li",[a("code",[t._v("p")]),t._v(" 和 "),a("code",[t._v("q")]),t._v(" 均存在于给定的二叉树中。")])]),t._v(" "),a("h2",{attrs:{id:"思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),a("p",[a("strong",[t._v("最近公共祖先")]),t._v("：假设root是p和q的公共祖先，则当root的root.left和root.right都不是p和q的公共祖先时，root为p和q的最近公共祖先。即当p和q存在root的异侧时，root为p和q的最近公共祖先。如果p和q存在root的一侧时，只能说是公共祖先，但不是最近公共祖先。")]),t._v(" "),a("p",[t._v("需要通过后序遍历，先知道左右子树的情况，之后再决定往上返回什么。")]),t._v(" "),a("p",[a("strong",[t._v("递归")]),t._v("：")]),t._v(" "),a("p",[a("strong",[t._v("终止条件")]),t._v("：当root等于p或者q时，就返回root。如果root越过叶子结点，返回null。")]),t._v(" "),a("p",[a("strong",[t._v("递归进行")]),t._v("：递归左子树，返回的节点记为left。递归右子树，返回的节点记为right。")]),t._v(" "),a("p",[a("strong",[t._v("返回结果")]),t._v("：")]),t._v(" "),a("p",[t._v("1、当left为null，且right为null，说明root的左子树和右子树中，都没有p和q。直接返回null。")]),t._v(" "),a("p",[t._v("2、当left不为null，right不为null，说明p和q存在root的两侧，返回最近公共祖先root。")]),t._v(" "),a("p",[t._v("3、当left为null，right不为null，说明root的左子树不存在p和q，而root的右子树存在p或者q，那么返回right。")]),t._v(" "),a("p",[t._v("4、当left不为null，right为null，同上3。")]),t._v(" "),a("p",[t._v("其中，1可以合并到3、4中。")]),t._v(" "),a("p",[a("strong",[t._v("参考题解")]),t._v("：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/236-er-cha-shu-de-zui-jin-gong-gong-zu-xian-hou-xu/",target:"_blank",rel:"noopener noreferrer"}},[t._v("236. 二叉树的最近公共祖先（后序遍历 DFS ，清晰图解）"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowestCommonAncestor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" root  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" root  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" q "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowestCommonAncestor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowestCommonAncestor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/02/28/eGrv5bEOyJwSufh.png",alt:"image-20210228154857445"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);