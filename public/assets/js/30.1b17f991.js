(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{510:function(s,n,a){"use strict";a.r(n);var e=a(5),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("strong",[s._v("简单数据类型的存储方式")])]),s._v(" "),a("p",[s._v("值类型变量的数据直接存放在变量（栈空间）中")]),s._v(" "),a("p",[a("strong",[s._v("复杂数据类型的存储方式")])]),s._v(" "),a("p",[s._v("引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中")]),s._v(" "),a("h2",{attrs:{id:"数据类型深入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型深入"}},[s._v("#")]),s._v(" 数据类型深入")]),s._v(" "),a("h3",{attrs:{id:"简单数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单数据类型"}},[s._v("#")]),s._v(" 简单数据类型")]),s._v(" "),a("p",[a("strong",[s._v("简单类型")]),s._v("（"),a("strong",[s._v("基本数据类型")]),s._v("、"),a("strong",[s._v("值类型")]),s._v("）：在存储时变量中存储的是值本身，包括 "),a("code",[s._v("string")]),s._v(" ，"),a("code",[s._v("number")]),s._v("，"),a("code",[s._v("boolean")]),s._v("，"),a("code",[s._v("undefined")]),s._v("，"),a("code",[s._v("null")])]),s._v(" "),a("h3",{attrs:{id:"复杂数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂数据类型"}},[s._v("#")]),s._v(" 复杂数据类型")]),s._v(" "),a("p",[a("strong",[s._v("复杂数据类型（引用类型）")]),s._v("：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 "),a("code",[s._v("Object")]),s._v("、"),a("code",[s._v("Array")]),s._v("、"),a("code",[s._v("Date")]),s._v("等；")]),s._v(" "),a("h3",{attrs:{id:"堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆栈"}},[s._v("#")]),s._v(" 堆栈")]),s._v(" "),a("p",[a("strong",[s._v("注意：JavaScript 并不存在堆栈，这里只是形象说明")])]),s._v(" "),a("p",[s._v("堆栈空间分配区别：")]),s._v(" "),a("ul",[a("li",[s._v("栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；")]),s._v(" "),a("li",[s._v("堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。")])]),s._v(" "),a("p",[a("strong",[s._v("简单数据类型的存储方式")])]),s._v(" "),a("p",[s._v("值类型变量的数据直接存放在变量（栈空间）中")]),s._v(" "),a("p",[a("strong",[s._v("复杂数据类型的存储方式")])]),s._v(" "),a("p",[s._v("引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中")]),s._v(" "),a("h3",{attrs:{id:"简单类型传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单类型传参"}},[s._v("#")]),s._v(" 简单类型传参")]),s._v(" "),a("p",[s._v("函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" function fn(a) {\n     a++;\n     console.log(a); \n }\n var x = 10;\n fn(x);\n console.log(x);\n \n /*\n     11\n     10\n */\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"复杂类型传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂类型传参"}},[s._v("#")]),s._v(" 复杂类型传参")]),s._v(" "),a("p",[s._v("函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' function Person(name) {\n     this.name = name;\n }\n function f1(x) {\n     console.log(x.name); \n     x.name = "张学友";\n     console.log(x.name);   \n }\n var p = new Person("刘德华");\n console.log(p.name);\n f1(p);\n console.log(p.name);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("运行结果：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" 刘德华\n 刘德华\n 张学友\n 张学友\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);